<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>githubpage + hexo + yilia 搭建个人博客</title>
      <link href="/2018/10/17/20.%E5%B7%A5%E5%85%B7%E7%B1%BB/%E5%8D%9A%E5%AE%A2/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/10/17/20.%E5%B7%A5%E5%85%B7%E7%B1%BB/%E5%8D%9A%E5%AE%A2/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="0-本博客的由来"><a href="#0-本博客的由来" class="headerlink" title="0.本博客的由来"></a>0.本博客的由来</h4><p>本来感觉写博客很费时间，但是最近感觉这两年攒手里的笔记太多了，不方便整理和分享</p><p>所以打算以后就干脆直接将笔记整理到github，这样也比自己维护一个博客省心</p><p>下面就将搭建本博客的步骤也同步上来，当做一个hello-world吧。</p><a id="more"></a><h4 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h4><p>电脑环境是Windows，安装好git后，所有搭建操作均在git bash内完成</p><p><strong>1）安装hexo(首先要安装git, node.js, npm)</strong></p><p>注意：首次安装git 要配置user信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>git config --global user.name "yourname"   #（yourname是git的用户名）</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>git config --global user.email email）</span><br></pre></td></tr></table></figure><p><strong>2）使用npm安装hexo</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>npm install -g hexo</span><br></pre></td></tr></table></figure><p><strong>3）创建hexo文件夹</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>mkdir hexo_blog</span><br><span class="line"><span class="meta">$</span>cd hexo_lobg</span><br></pre></td></tr></table></figure><p><strong>4）初始化框架</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>hexo init #hexo   #会自动创建网站所需要的文件</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>npm install    #安装依赖包</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>hexo generate </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>hexo server   #现在可以用127.0.0.1:4000访问hexo默认的hello world界面 ,hexo s = hexo server</span><br></pre></td></tr></table></figure><h4 id="2-部署到github"><a href="#2-部署到github" class="headerlink" title="2.部署到github"></a>2.部署到github</h4><p><strong>1）首次使用github需要配置密钥</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "email"</span><br></pre></td></tr></table></figure><p>生成ssh密钥，按三次回车键，密码为空,这边会生成id_rsa和_rsa.pub文件</p><p>打开id_rsa.pub，复制全文添加到GitHub 的Add SSH key中。</p><p><strong>2）创建Respository， 并开启githubPage</strong></p><p>首先注册登录github,然后创建页面仓库，Repository name 命名应该是 youname.github.io </p><p>在setting界面， 配置</p><p><img src="/img/1539839479905-1539839725571.png" alt="1539839479905-1539839725571"></p><p><strong>3）安装hexo-deployer-git</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>npm install hexo-deployer-git --save     用来推送项目到github</span><br></pre></td></tr></table></figure><p><strong>4）生成博客，并push到github</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>hexo generate</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>hexo deploy</span><br></pre></td></tr></table></figure><p><strong>5）验证结果</strong></p><p>通过<a href="https://youname.github.io" target="_blank" rel="noopener">https://youname.github.io</a> 进行访问</p><h4 id="3-更换博客模板"><a href="#3-更换博客模板" class="headerlink" title="3.更换博客模板"></a>3.更换博客模板</h4><p>目前访问的博客模板比较简略，下面介绍使用：yilia模板</p><p><strong>1）拉取模板文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><p><strong>2）更改配置文件修改模板为yilia</strong></p><p>打开项目目录下的_config.yml文件，更改主题theme;   <code>theme: yilia</code><br>然后配置yilia文件下的_config.yml（目录：<code>hexo/themes/yilia/_config.yml</code>） 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"># Header</span><br><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  归档: /archives</span><br><span class="line">  #分类: /categories</span><br><span class="line">  #标签: /tags</span><br><span class="line"></span><br><span class="line"># SubNav</span><br><span class="line">subnav:</span><br><span class="line">  github: &quot;https://github.com/KyleAdultHub&quot;</span><br><span class="line">  #weibo: &quot;#&quot;</span><br><span class="line">  #rss: &quot;#&quot;</span><br><span class="line">  #zhihu: &quot;#&quot;</span><br><span class="line">  qq: &quot;/information&quot;</span><br><span class="line">  #weixin: &quot;#&quot;</span><br><span class="line">  #jianshu: &quot;#&quot;</span><br><span class="line">  #douban: &quot;#&quot;</span><br><span class="line">  #segmentfault: &quot;#&quot;</span><br><span class="line">  #bilibili: &quot;#&quot;</span><br><span class="line">  #acfun: &quot;#&quot;</span><br><span class="line">  mail: &quot;/information&quot;</span><br><span class="line">  #facebook: &quot;#&quot;</span><br><span class="line">  #google: &quot;#&quot;</span><br><span class="line">  #twitter: &quot;#&quot;</span><br><span class="line">  #linkedin: &quot;#&quot;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">rss: /atom.xml</span><br><span class="line"></span><br><span class="line"># 是否需要修改 root 路径</span><br><span class="line"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</span><br><span class="line"># 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span><br><span class="line">root: /</span><br><span class="line"></span><br><span class="line"># Content</span><br><span class="line"># 文章太长，截断按钮文字</span><br><span class="line">excerpt_link: more</span><br><span class="line"># 文章卡片右下角常驻链接，不需要请设置为false</span><br><span class="line">show_all_link: &apos;展开全文&apos;</span><br><span class="line"># 数学公式</span><br><span class="line">mathjax: false</span><br><span class="line"># 是否在新窗口打开链接</span><br><span class="line">open_in_new: false</span><br><span class="line"></span><br><span class="line"># 打赏</span><br><span class="line"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏</span><br><span class="line">reward_type: 0</span><br><span class="line"># 打赏wording</span><br><span class="line">reward_wording: &apos;谢谢你&apos;</span><br><span class="line"># 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg</span><br><span class="line">alipay: </span><br><span class="line"># 微信二维码图片地址</span><br><span class="line">weixin: </span><br><span class="line"></span><br><span class="line"># 目录</span><br><span class="line"># 目录设定：0-不显示目录； 1-文章对应的md文件里有toc:true属性，才有目录； 2-所有文章均显示目录</span><br><span class="line">toc: 1</span><br><span class="line"># 根据自己的习惯来设置，如果你的目录标题习惯有标号，置为true即可隐藏hexo重复的序号；否则置为false</span><br><span class="line">toc_hide_index: true</span><br><span class="line"># 目录为空时的提示</span><br><span class="line">toc_empty_wording: &apos;目录，不存在的…&apos;</span><br><span class="line"></span><br><span class="line"># 是否有快速回到顶部的按钮</span><br><span class="line">top: true</span><br><span class="line"></span><br><span class="line"># Miscellaneous</span><br><span class="line">baidu_analytics: &apos;&apos;</span><br><span class="line">google_analytics: &apos;&apos;</span><br><span class="line">favicon: /favicon.png</span><br><span class="line"></span><br><span class="line">#你的头像url</span><br><span class="line">avatar: /img/header.jpg</span><br><span class="line"></span><br><span class="line">#是否开启分享</span><br><span class="line">share_jia: true</span><br><span class="line"></span><br><span class="line">#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus；5、Gitment</span><br><span class="line">#不需要使用某项，直接设置值为false，或注释掉</span><br><span class="line">#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/</span><br><span class="line"></span><br><span class="line">#1、多说</span><br><span class="line">duoshuo: false</span><br><span class="line"></span><br><span class="line">#2、网易云跟帖</span><br><span class="line">wangyiyun: false</span><br><span class="line"></span><br><span class="line">#3、畅言</span><br><span class="line">changyan_appid: *** #这个畅言id和conf写自己的</span><br><span class="line">changyan_conf: ***</span><br><span class="line"></span><br><span class="line">#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的</span><br><span class="line">disqus: false</span><br><span class="line"></span><br><span class="line">#5、Gitment</span><br><span class="line">gitment_owner: false      #你的 GitHub ID</span><br><span class="line">gitment_repo: &apos;&apos;          #存储评论的 repo</span><br><span class="line">gitment_oauth:</span><br><span class="line">  client_id: &apos;&apos;           #client ID</span><br><span class="line">  client_secret: &apos;&apos;       #client secret</span><br><span class="line"></span><br><span class="line"># 样式定制 - 一般不需要修改，除非有很强的定制欲望…</span><br><span class="line">style:</span><br><span class="line">  # 头像上面的背景颜色</span><br><span class="line">  header: &apos;#4d4d4d&apos;</span><br><span class="line">  # 右滑板块背景</span><br><span class="line">  slider: &apos;linear-gradient(200deg,#a0cfe4,#e8c37e)&apos;</span><br><span class="line"></span><br><span class="line"># slider的设置</span><br><span class="line">slider:</span><br><span class="line">  # 是否默认展开tags板块</span><br><span class="line">  showTags: false</span><br><span class="line"></span><br><span class="line"># 智能菜单</span><br><span class="line"># 如不需要，将该对应项置为false</span><br><span class="line"># 比如</span><br><span class="line">#smart_menu:</span><br><span class="line">#  friends: false</span><br><span class="line">smart_menu:</span><br><span class="line">  innerArchive: &apos;所有文章&apos;</span><br><span class="line">  friends: &apos;友链&apos;</span><br><span class="line">  aboutme: &apos;关于我&apos;</span><br><span class="line"></span><br><span class="line">friends:</span><br><span class="line">  #友情链接1: http://localhost:4000/</span><br><span class="line">  </span><br><span class="line">aboutme: </span><br><span class="line">  程序猿一枚&lt;br&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建Registry 私有库</title>
      <link href="/2018/10/17/12.Docker%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Docker/%E6%90%AD%E5%BB%BARegistry%E7%A7%81%E6%9C%89%E5%BA%93/"/>
      <url>/2018/10/17/12.Docker%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Docker/%E6%90%AD%E5%BB%BARegistry%E7%A7%81%E6%9C%89%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h3 id="1-4关于Registry仓库"><a href="#1-4关于Registry仓库" class="headerlink" title="1.4关于Registry仓库"></a><strong>1.4关于Registry仓库</strong></h3><p>官方的<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker hub</a>是一个用于管理公共镜像的好地方，我们可以在上面找到我们想要的镜像，也可以把我们自己的镜像推送上去。但是，有时候，我们的使用场景需要我们拥有一个私有的镜像仓库用于管理我们自己的镜像。这个可以通过开源软件Registry来达成目的。</p><p> Registry在github上有两份代码：<a href="https://github.com/docker/docker-registry" target="_blank" rel="noopener">老代码库</a>和<a href="https://github.com/docker/distribution" target="_blank" rel="noopener">新代码库</a>。老代码是采用python编写的，存在pull和push的性能问题，出到0.9.1版本之后就标志为deprecated，不再继续开发。从2.0版本开始就到在新代码库进行开发，新代码库是采用go语言编写，修改了镜像id的生成算法、registry上镜像的保存结构，大大优化了pull和push镜像的效率。</p><p> 官方在Docker hub上提供了registry的镜像（<a href="https://hub.docker.com/_/registry/" target="_blank" rel="noopener">详情</a>），我们可以直接使用该registry镜像来构建一个容器，搭建我们自己的私有仓库服务。Tag为latest的registry镜像是0.9.1版本的，我们直接采用2.1.1版本。</p><a id="more"></a><h3 id="2-Registry的部署"><a href="#2-Registry的部署" class="headerlink" title="2.Registry的部署"></a>2.Registry的部署</h3><p><strong>运行下面命令获取registry镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker pull registry:2.1.1</span><br></pre></td></tr></table></figure><p><strong>然后启动一个容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker run -d -v /opt/data/registry/:/var/lib/registry -p 5000:5000 --restart=always --name registry registry:2.1.1</span><br></pre></td></tr></table></figure><p><strong>验证服务是否启动成功</strong></p><p>说明我们已经启动了registry服务，打开浏览器输入<a href="http://127.0.0.1:5000/v2" target="_blank" rel="noopener">http://127.0.0.1:5000/v2</a></p><h3 id="3-验证"><a href="#3-验证" class="headerlink" title="3.验证"></a>3.验证</h3><p><strong>向仓库中push镜像</strong></p><p>现在我们通过将镜像push到registry来验证一下。我的机器上有个hello-world的镜像，我们要通过docker tag将该镜像标志为要推送到私有仓库，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker tag hello-world 127.0.0.1:5000/hello-world</span><br></pre></td></tr></table></figure><p>接下来，我们运行docker push将hello-world镜像push到我们的私有仓库中，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker push 127.0.0.1:5000/hello-world</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The push refers to a repository [127.0.0.1:5000/hello-world] (len: 1)</span><br><span class="line"></span><br><span class="line">975b84d108f1: Image successfully pushed</span><br><span class="line"></span><br><span class="line">3f12c794407e: Image successfully pushed</span><br><span class="line"></span><br><span class="line">latest: digest: sha256:1c7adb1ac65df0bebb40cd4a84533f787148b102684b74cb27a1982967008e4b size: 2744</span><br></pre></td></tr></table></figure><p>现在我们可以查看我们本地/opt/registry目录下已经有了刚推送上来的hello-world。我们也在浏览器中输入<a href="http://127.0.0.1:5000/v2/_catalog，如下图所示，" target="_blank" rel="noopener">http://127.0.0.1:5000/v2/_catalog，如下图所示，</a></p><p><strong>从镜像库中拉取镜像</strong></p><p>现在我们可以先将我们本地的127.0.0.1:5000/hello-world和hello-world先删除掉，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker rmi hello-world</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> sudo docker rmi 127.0.0.1:5000/hello-world</span><br></pre></td></tr></table></figure><p>然后使用docker pull从我们的私有仓库中获取hello-world镜像，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker pull 127.0.0.1:5000/hello-world</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Using default tag: latest</span><br><span class="line"></span><br><span class="line">latest: Pulling from hello-world</span><br><span class="line"></span><br><span class="line">b901d36b6f2f: Pull complete</span><br><span class="line"></span><br><span class="line">0a6ba66e537a: Pull complete</span><br><span class="line"></span><br><span class="line">Digest: sha256:1c7adb1ac65df0bebb40cd4a84533f787148b102684b74cb27a1982967008e4b</span><br><span class="line"></span><br><span class="line">Status: Downloaded newer image for 127.0.0.1:5000/hello-world:latest</span><br><span class="line"></span><br><span class="line">lienhua34@lienhua34-Compaq-Presario-CQ35-Notebook-PC ~ $ sudo docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE</span><br><span class="line"></span><br><span class="line">registry 2.1.1 b91f745cd233 5 days ago 220.1 MB</span><br><span class="line"></span><br><span class="line">ubuntu 14.04 a5a467fddcb8 6 days ago 187.9 MB</span><br><span class="line"></span><br><span class="line">127.0.0.1:5000/hello-world latest 0a6ba66e537a 2 weeks ago 960 B</span><br></pre></td></tr></table></figure><h3 id="4-查询镜像库"><a href="#4-查询镜像库" class="headerlink" title="4.查询镜像库"></a>4.查询镜像库</h3><p><strong>查询镜像库中的镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.110.218:5000/v2/_catalog</span><br></pre></td></tr></table></figure><h3 id="5-错误排查"><a href="#5-错误排查" class="headerlink" title="5.错误排查"></a>5.错误排查</h3><p><strong>错误描述</strong></p><p>在push 到docker registry时，可能会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The push refers to a repository [192.168.1.100:5000/registry]</span><br><span class="line"></span><br><span class="line">Get https://192.168.1.100:5000/v1/_ping: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure><p>这个问题可能是由于客户端采用https，docker registry未采用https服务所致。一种处理方式是把客户对地址“192.168.1.100:5000”请求改为http。</p><p>目前很多文章都是通过修改docker的配置文件“etc/systemconfig/docker”，重启docker来解决这个问题。但发现docker1.12.3版本并无此文件，根据网上创建此文件，并填入相应内容，重启docker无效果，仍然报此错误。</p><p> <strong>解决办法</strong></p><p>在”/etc/docker/“目录下，创建”daemon.json“文件。在文件中写入：</p><p>{ “insecure-registries”:[“192.168.1.100:5000”] }</p><p>保存退出后，重启docker。</p>]]></content>
      
      
      <categories>
          
          <category> Docker容器技术 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
